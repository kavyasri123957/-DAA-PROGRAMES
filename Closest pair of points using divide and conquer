def closest_pair(points):
    points.sort(key=lambda x: x[0])  # Sort points by x-coordinate
    return closest_pair_rec(points)
def closest_pair_rec(points):
    if len(points) <= 3:
        return brute_force(points)    
    mid = len(points) // 2
    mid_point = points[mid]   
    dl = closest_pair_rec(points[:mid])
    dr = closest_pair_rec(points[mid:])    
    d = min(dl, dr)    
    strip = [p for p in points if abs(p[0] - mid_point[0]) < d]
    return min(d, strip_closest(strip, d))
def brute_force(points):
    min_dist = float('inf')
    for i in range(len(points)):
        for j in range(i + 1, len(points)):
            dist = euclidean_distance(points[i], points[j])
            min_dist = min(min_dist, dist)
    return min_dist
def strip_closest(strip, d):
    min_dist = d
    strip.sort(key=lambda x: x[1])  # Sort by y-coordinate
    for i in range(len(strip)):
        for j in range(i + 1, len(strip)):
            if (strip[j][1] - strip[i][1]) < min_dist:
                dist = euclidean_distance(strip[i], strip[j])
                min_dist = min(min_dist, dist)
            else:
                break
    return min_dist
def euclidean_distance(p1, p2):
    return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5
