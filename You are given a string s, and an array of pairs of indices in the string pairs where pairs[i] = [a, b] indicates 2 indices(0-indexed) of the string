from collections import defaultdict, deque
def smallest_string_with_swaps(s, pairs):
graph = defaultdict(list)
for a, b in pairs:
graph[a].append(b)
graph[b].append(a)
def dfs(node, visited, component):
stack = [node]
while stack:
current = stack.pop()
if not visited[current]:
visited[current] = True
component.append(current)
for neighbor in graph[current]:
if not visited[neighbor]:
stack.append(neighbor)
visited = [False] * len(s)
components = []
for i in range(len(s)):
if not visited[i]:
component = []
dfs(i, visited, component)
components.append(component)
chars = [s_list[i] for i in component]
chars.sort()
for i, char_index in enumerate(sorted(component)):
s_list[char_index] = chars[i]
return ''.join(s_list)
s = "dcab"
pairs = [[0, 3], [1, 2]]
result = smallest_string_with_swaps(s, pairs)
print("Lexicographically smallest string:", result)
